version: '3.8'

services:
#  echo-server:
#    image: alpine/socat # Using socat for a simple echo server
#    command: TCP-LISTEN:8080,fork,reuseaddr EXEC:'/bin/cat'
#    ports:
#      # Expose on host only for testing if needed, not strictly necessary for internal communication
#      # - "8080:8080"
#    networks:
#      - tunnel_net
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "10m"
#        max-file: "3"

  tunnel-server:
    build:
      context: .
      dockerfile: docker/server.Dockerfile
    ports:
      - "8443:8443" # Expose server's listening port to the host
    volumes:
      # Mount the server's .env configuration file
      # It's assumed you will create server/config/.env from server/config/.env.example
      - ./server/config/.env:/app/config/.env:ro
      # Mount the entire certs directory (read-only)
      # Cert paths in .env should be like 'certs/server.crt' which resolves to '/app/certs/server.crt'
      - ./certs:/app/certs:ro
      # Mount a directory for server logs (read-write)
      # Log path in .env should be like 'logs/server/server.log' which resolves to '/app/logs/server/server.log'
      - ./logs/server:/app/logs
#    depends_on:
#      - echo-server # Optional: ensure echo-server starts first, though server doesn't directly depend on it at startup
    networks:
      - tunnel_net # Server still needs to be on a network to be reachable by clients (even if client is not in this compose)
                   # And to reach external targets
    environment:
      # For Python's unbuffered output, useful for seeing logs immediately
      PYTHONUNBUFFERED: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

#  tunnel-client:
#    build:
#      context: .
#      dockerfile: docker/client.Dockerfile
#    ports:
#      - "1080:1080" # Expose client's local listening port to the host
#    volumes:
#      - ./config/client_config.yaml:/app/config/client_config.yaml:ro
#      - ./certs:/app/certs:ro
#      - ./logs/client:/app/logs
#    depends_on:
#      - tunnel-server # Client needs the server to be available
#    networks:
#      - tunnel_net
#    environment:
#      PYTHONUNBUFFERED: 1
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "10m"
#        max-file: "3"

networks:
  tunnel_net:
    driver: bridge

# Before running `docker-compose up` for the server:
# 1. Ensure you have a `certs/` directory with at least:
#    ca.crt (if mTLS is used), server.crt, server.key.
# 2. Create `server/config/.env` from `server/config/.env.example` and configure it.
#    Paths for certificates (e.g., SHIELDNET_TLS_SERVER_CERT="certs/server.crt") and
#    logs (e.g., SHIELDNET_LOG_FILE="logs/server/server.log") inside the .env file
#    should be relative paths that will correctly resolve to `/app/certs/...` and `/app/logs/...`
#    inside the container, given that ENV_BASE_DIR in server.py is /app.
#    For example, SHIELDNET_TLS_SERVER_CERT="certs/server.crt" will be resolved to /app/certs/server.crt.
# 3. Create `logs/server` directory locally: `mkdir -p logs/server`.
#
# The client application (`client.py`) is NOT deployed by this docker-compose file.
# It needs to be run separately, with its own `client/config/.env` file,
# configured to connect to the `tunnel-server`
# (e.g., SHIELDNET_REMOTE_SERVER_HOST="localhost" SHIELDNET_REMOTE_SERVER_PORT="8443"
# if this docker-compose is run locally).

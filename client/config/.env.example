# ShieldNet Client Configuration (.env example)
# Copy this file to .env in the same directory and customize.

# Logging Settings
SHIELDNET_LOG_LEVEL="INFO"                 # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
SHIELDNET_LOG_FILE="logs/client/client.log"  # Path relative to project root, or absolute. For Docker, will be relative to /app
SHIELDNET_LOG_ROTATION_BYTES="10485760"    # Max log file size in bytes (e.g., 10MB)
SHIELDNET_LOG_BACKUP_COUNT="5"             # Number of backup log files to keep

# Local Listener Settings (where your local application connects)
SHIELDNET_LOCAL_LISTENER_HOST="127.0.0.1"
SHIELDNET_LOCAL_LISTENER_PORT="1080"       # Required

# Remote ShieldNet Server Settings
SHIELDNET_REMOTE_SERVER_HOST="localhost"   # Hostname or IP of the ShieldNet server (Required)
SHIELDNET_REMOTE_SERVER_PORT="8443"        # Port of the ShieldNet server (Required)
# Path to CA certificate to verify the server. Essential if server uses self-signed/private certs.
SHIELDNET_REMOTE_SERVER_CA_CERT="certs/ca.crt" # Path relative to project root, or absolute

# TLS Settings
# Paths to client certificate and key for mTLS (if server requires it)
SHIELDNET_TLS_CLIENT_CERT="certs/client.crt" # Optional, for mTLS
SHIELDNET_TLS_CLIENT_KEY="certs/client.key"    # Optional, for mTLS
SHIELDNET_TLS_MIN_VERSION="TLSv1.2"        # Options: "TLSv1.2", "TLSv1.3"
# Optional: Specify server's expected Common Name (CN) if it differs from REMOTE_SERVER_HOST and hostname check is needed.
SHIELDNET_TLS_EXPECTED_SERVER_CN=""

# Timeout Settings (in seconds)
SHIELDNET_TIMEOUT_CONNECT="10"             # Timeout for TCP connection to ShieldNet server
SHIELDNET_TIMEOUT_TLS_HANDSHAKE="15"       # Timeout for TLS handshake with ShieldNet server
SHIELDNET_TIMEOUT_SOCKET_DATA="60"         # Timeout for data send/recv operations on sockets
SHIELDNET_TIMEOUT_RECONNECT_DELAY_BASE="5" # Base delay for reconnection attempts
SHIELDNET_TIMEOUT_RECONNECT_MAX_RETRIES="5" # Max number of reconnection attempts (0 for no retries)

# Note: Dynamic target host and port are provided as CLI arguments when running client.py:
# --target-host <host> --target-port <port>
```
